default:
  image: node
.go-build:
  image: golang:alpine
  script:
    - go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o main .
  artifacts:
    name: "$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA"
    paths:
      - main
    expire_in: 30 days
  variables:
    CGO_ENABLED: 0

.go-test:
  extends: .go-build
  script:
    - go test -v .

.go-release:
  stage: release
  image:
    name: goreleaser/goreleaser
    entrypoint: ['']
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
    GITLAB_TOKEN: $CI_JOB_TOKEN
  script:
    - goreleaser release --clean

.dockerize: # https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Kaniko.gitlab-ci.yml
  variables:
    # Additional options for Kaniko executor.
    # For more details see https://github.com/GoogleContainerTools/kaniko/blob/master/README.md#additional-flags
    KANIKO_ARGS: ""
    KANIKO_BUILD_CONTEXT: $CI_PROJECT_DIR
  image:
    # For latest releases see https://github.com/GoogleContainerTools/kaniko/releases
    # Only debug/*-debug versions of the Kaniko image are known to work within Gitlab CI
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # if the user provide IMAGE_TAG then use it, else build the image tag using the default logic.
    # Default logic
    # Compose docker tag name
    # Git Branch/Tag to Docker Image Tag Mapping
    #   * Default Branch: main -> latest
    #   * Branch: feature/my-feature -> branch-feature-my-feature
    #   * Tag: v1.0.0/beta2 -> v1.0.0-beta2
    - |
      if [ -z ${IMAGE_TAG+x} ]; then
        if [ "$CI_COMMIT_REF_NAME" = $CI_DEFAULT_BRANCH ]; then
            VERSION="latest"
          elif [ -n "$CI_COMMIT_TAG" ];then
            NOSLASH=$(echo "$CI_COMMIT_TAG" | tr -s / - )
            SANITIZED="${NOSLASH//[^a-zA-Z0-9\-\.]/}"
            VERSION="$SANITIZED"
          else \
            NOSLASH=$(echo "$CI_COMMIT_REF_NAME" | tr -s / - )
            SANITIZED="${NOSLASH//[^a-zA-Z0-9\-]/}"
            VERSION="branch-$SANITIZED"
          fi
        export VERSION=$VERSION
        export IMAGE_TAG=$CI_REGISTRY_IMAGE:$VERSION
      fi
    - echo $IMAGE_TAG
    - mkdir -p /kaniko/.docker
    # https://docs.gitlab.com/ee/user/project/integrations/harbor.html#examples-of-harbor-variables-in-cicd
    # Write credentials to access Gitlab Container Registry within the runner/ci
    # - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"$HARBOR_HOST\":{\"auth\":\"$(echo -n ${HARBOR_USERNAME}:${HARBOR_PASSWORD} | base64 | tr -d '\n')\"},\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    # Build and push the container. To disable push add --no-push
    - DOCKERFILE_PATH=${DOCKERFILE_PATH:-"$KANIKO_BUILD_CONTEXT/Dockerfile"}
    - /kaniko/executor --context $KANIKO_BUILD_CONTEXT --dockerfile $DOCKERFILE_PATH --destination $IMAGE_TAG --destination "${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}:${VERSION}" $KANIKO_ARGS
  # Run this job in a branch/tag where a Dockerfile exists
  rules:
    - exists:
        - Dockerfile
    # custom Dockerfile path
    - if: $DOCKERFILE_PATH
    # custom build context without an explicit Dockerfile path
    - if: $KANIKO_BUILD_CONTEXT != $CI_PROJECT_DIR

.k8s-deployment:
  variables:
    APP_IMAGE: dxas90/learn
    APP_NAME: learn
    CLUSTER_NAME: test-cluster-1
  image: ubuntu:latest
  services:
    - docker:dind
  before_script:
    # Install required tools
    - apt-get update -qq && apt-get install -y -qq
        curl 
        wget 
        ca-certificates 
        gnupg 
        lsb-release
    # Install Docker CLI
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update -qq && apt-get install -y -qq docker-ce-cli
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    # Install Kind
    - curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
    - chmod +x ./kind && mv ./kind /usr/local/bin/kind
  script:
    # Set up variables
    - export LAST_COMMIT_HASH="${CI_COMMIT_SHORT_SHA}"
    - echo "Building Docker image..."
    # Build Docker image
    - docker build -t ${APP_IMAGE}:${LAST_COMMIT_HASH} .
    - docker tag ${APP_IMAGE}:${LAST_COMMIT_HASH} ${APP_IMAGE}:latest
    # Create Kind cluster
    - echo "Creating Kind cluster..."
    - kind create cluster --name ${CLUSTER_NAME} --wait 5m
    # Load image into Kind cluster
    - echo "Loading image into Kind cluster..."
    - kind load docker-image ${APP_IMAGE}:${LAST_COMMIT_HASH} --name ${CLUSTER_NAME}
    # Wait for nodes to be ready
    - echo "Waiting for nodes to be ready..."
    - kubectl wait --for=condition=Ready nodes --all --timeout=5m
    - echo "Nodes:"
    - kubectl get nodes
    - echo "Cluster info:"
    - kubectl cluster-info
    # Deploy metrics server
    - echo "Deploying metrics server..."
    - kubectl apply -f https://raw.githubusercontent.com/dxas90/k3d-cluster/refs/heads/master/k8s/monitoring/00_metrics-server.yaml
    # Prepare E2E overlay with commit hash
    - echo "Preparing E2E overlay with commit hash: ${LAST_COMMIT_HASH}"
    - sed "s/\${LAST_COMMIT_HASH}/${LAST_COMMIT_HASH}/g" k8s/overlays/e2e/kustomization.yaml > /tmp/kustomization-e2e.yaml
    - cp /tmp/kustomization-e2e.yaml k8s/overlays/e2e/kustomization.yaml
    # Deploy application
    - echo "Deploying application with E2E overlay..."
    - kubectl apply -k k8s/overlays/e2e
    # Wait for pods to be ready
    - echo "Waiting for pods to be ready..."
    - kubectl wait --for=condition=Ready pods --all --timeout=5m
    - kubectl label ns default purpose=infrastructure
    - kubectl get pods
    # Run tests
    - echo "Running smoke test..."
    - chmod +x scripts/smoke-test.sh && ./scripts/smoke-test.sh
    - echo "Starting comprehensive end-to-end testing..."
    - chmod +x scripts/e2e-test.sh && ./scripts/e2e-test.sh
    - echo "Starting WebSocket testing..."
    - chmod +x scripts/websocket-test.sh && ./scripts/websocket-test.sh
    # Final health check
    - echo "Final deployment health check..."
    - kubectl get all
    - kubectl describe deployment learn
    # Check if all pods are healthy
    - |
      UNHEALTHY_PODS=$(kubectl get pods --field-selector=status.phase!=Running --no-headers | wc -l)
      if [ "$UNHEALTHY_PODS" -gt 0 ]; then
        echo "Found unhealthy pods:"
        kubectl get pods --field-selector=status.phase!=Running
        exit 1
      fi
    - echo "âœ… All deployment health checks passed!"
  after_script:
    # Collect debug information on failure
    - |
      if [ "$CI_JOB_STATUS" = "failed" ]; then
        echo "=== COLLECTING DEBUG INFORMATION ==="
        echo "--- Cluster Information ---"
        kubectl cluster-info || true
        kubectl get nodes -o wide || true
        echo "--- All Resources ---"
        kubectl get all -o wide || true
        echo "--- Pod Descriptions ---"
        kubectl describe pods || true
        echo "--- Pod Logs ---"
        for pod in $(kubectl get pods -o name 2>/dev/null || true); do
          echo "=== Logs for $pod ==="
          kubectl logs $pod --all-containers=true || true
        done
        echo "--- Events ---"
        kubectl get events --sort-by='.metadata.creationTimestamp' || true
      fi
    # Cleanup Kind cluster
    - kind delete cluster --name ${CLUSTER_NAME} || true
