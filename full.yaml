---
# Source: learn/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-learn
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels: {}
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              purpose: infrastructure
---
# Source: learn/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-learn
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::1234567890:role/k8s-learn
automountServiceAccountToken: true
---
# Source: learn/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: release-name-learn-secret
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
data:
  APP_ENV: cHJvZA==
  APP_SECRET: ZTM4MWNkMGYiMTl5ODIyMw==
type: Opaque
---
# Source: learn/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-learn-config
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
data:
  REDIS_DSN: redis://redis:6379?timeout=0.5
  MONGODB_URL: mongodb://mongodb:27017
  MAILER_URL: smtp://mail-server:1025
---
# Source: learn/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-learn-pvc
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Mi
  volumeMode: Filesystem
---
# Source: learn/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-learn
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
---
# Source: learn/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-learn
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: learn
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        helm.sh/chart: learn-0.1.0
        app.kubernetes.io/name: learn
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v0.0.12"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: release-name-learn
      securityContext:
        fsGroup: 65534
      containers:
        - name: learn
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "dxas90/learn:v0.0.12"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            tcpSocket:
              port: 8080
          resources:
            limits:
              cpu: 1m
              memory: 56Mi
            requests:
              cpu: 1m
              memory: 56Mi
          volumeMounts:
            - name: secrets
              mountPath: "/secrets"
            - mountPath: /cache
              name: cache-volume
      volumes:
        - name: secrets
          persistentVolumeClaim:
            claimName: release-name-learn-pvc
        - emptyDir: {}
          name: cache-volume
      tolerations:
        - effect: NoExecute
          key: kiam-server
          operator: Equal
          value: "false"
        - effect: NoSchedule
          key: kiam-server
          operator: Equal
          value: "false"
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
# Source: learn/templates/networkpolicy.yaml
# https://ahmet.im/blog/kubernetes-network-policy/
---
# Source: learn/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-learn-test-connection"
  labels:
    helm.sh/chart: learn-0.1.0
    app.kubernetes.io/name: learn
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.12"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-learn:8080']
      resources:
        limits:
          cpu: 1m
          memory: 20Mi
        requests:
          cpu: 1m
          memory: 20Mi
  restartPolicy: Never
